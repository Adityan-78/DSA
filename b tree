#include <stdio.h>
#include <stdlib.h>

#define MAX_KEYS 3

typedef struct BTreeNode {
    int num_keys;
    int keys[MAX_KEYS];
    struct BTreeNode* children[MAX_KEYS + 1];
} BTreeNode;

BTreeNode* createNode() {
    BTreeNode* node = (BTreeNode*)malloc(sizeof(BTreeNode));
    if (node) {
        node->num_keys = 0;
        for (int i = 0; i <= MAX_KEYS; i++) {
            node->children[i] = NULL;
        }
    }
    return node;
}

void splitChild(BTreeNode* parent, int index) {
    BTreeNode* child = parent->children[index];
    BTreeNode* newChild = createNode();

    parent->num_keys++;

    for (int i = parent->num_keys; i > index; i--) {
        parent->keys[i] = parent->keys[i - 1];
        parent->children[i + 1] = parent->children[i];
    }

    parent->keys[index] = child->keys[MAX_KEYS / 2];

    parent->children[index + 1] = newChild;

    for (int i = 0; i < (MAX_KEYS / 2); i++) {
        newChild->keys[i] = child->keys[(MAX_KEYS / 2) + i];
        newChild->children[i] = child->children[(MAX_KEYS / 2) + i];
    }

    child->num_keys = MAX_KEYS / 2;
    newChild->num_keys = MAX_KEYS / 2;
}

void insert(BTreeNode* node, int key) {
    int i = node->num_keys;
    if (node->children[0] == NULL) {
        while (i > 0 && key < node->keys[i - 1]) {
            node->keys[i] = node->keys[i - 1];
            i--;
        }
        node->keys[i] = key;
        node->num_keys++;
    } else {
        while (i > 0 && key < node->keys[i - 1]) {
            i--;
        }
        if (node->children[i]->num_keys == MAX_KEYS) {
            splitChild(node, i);
            if (key > node->keys[i])
                i++;
        }
        insert(node->children[i], key);
    }
}

void printTree(BTreeNode* node) {
    if (node) {
        for (int i = 0; i < node->num_keys; i++) {
            printTree(node->children[i]);
            printf("%d ", node->keys[i]);
        }
        printTree(node->children[node->num_keys]);
    }
}

int main() {
    BTreeNode* root = createNode();
    int keys[] = {3, 6, 9, 1, 5, 2, 7, 8, 4};
    int num_keys = sizeof(keys) / sizeof(keys[0]);

    for (int i = 0; i < num_keys; i++) {
        if (root->num_keys == MAX_KEYS) {
            BTreeNode* new_root = createNode();
            new_root->children[0] = root;
            splitChild(new_root, 0);
            root = new_root;
        }
        insert(root, keys[i]);
    }

    printf("B-tree in-order traversal:\n");
    printTree(root);

    return 0;
}
